{
  "paragraphs": [
    {
      "text": "%spark.pyspark\nfrom pyspark.ml import Pipeline,PipelineModel\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nfrom pyspark.ml.feature import StringIndexer,StandardScaler,VectorAssembler,StringIndexerModel,StandardScalerModel\nfrom pyspark.ml.classification import RandomForestClassifier\nfrom handyspark import BinaryClassificationMetrics\nimport matplotlib.pyplot as plt\nimport warnings \nwarnings.filterwarnings(\u0027ignore\u0027)",
      "user": "anonymous",
      "dateUpdated": "2020-06-18 10:28:23.802",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1592396526516_-668284208",
      "id": "paragraph_1592396526516_-668284208",
      "dateCreated": "2020-06-17 17:52:06.516",
      "dateStarted": "2020-06-18 10:28:23.812",
      "dateFinished": "2020-06-18 10:28:25.441",
      "status": "FINISHED"
    },
    {
      "text": "%spark.pyspark\n# load data\ndata \u003d spark.read.format(\u0027avro\u0027).load(\u0027file:///home/csvankhede/workspace/Customer_churn_prediction/Customer_Churn.avro\u0027,header\u003dTrue).orderBy(rand())\n\n# save schema\n# https://gist.github.com/giefferre/0998159953466b4273ec8f921d6dc773\ntemp_rdd \u003d sc.parallelize(data.schema)\ntemp_rdd.coalesce(1).saveAsPickleFile(\u0027file:///home/csvankhede/workspace/Customer_churn_prediction/pickled_obj/schema.pickle\u0027)\n\n# split data\ntrain,test \u003d data.randomSplit([0.7,0.3],45)\n\ncat_cols \u003d [i[0] for i in data.dtypes if \u0027string\u0027 in i[1] if i[0]!\u003d\u0027customerid\u0027]\ncat_cols_out \u003d [\u0027{}_{}\u0027.format(i,\u0027enc\u0027) for i in cat_cols]\nnum_cols \u003d [i[0] for i in data.dtypes if i[1] in [\u0027int\u0027,\u0027double\u0027] if i[0]!\u003d\u0027seniorcitizen\u0027]\nfeat \u003d num_cols+[i for i in cat_cols_out if i !\u003d\u0027churn_enc\u0027]+[\u0027seniorcitizen\u0027]\n\n# preprocessing and encoding\nindexer \u003d StringIndexer(inputCols\u003dcat_cols,outputCols\u003dcat_cols_out)\nassembler \u003d VectorAssembler().setInputCols(feat).setOutputCol(\u0027features\u0027)\nscaler \u003d StandardScaler(inputCol\u003d\u0027features\u0027,outputCol\u003d\u0027features_sc\u0027,withStd\u003dTrue, withMean\u003dFalse)\n\n# build model\nrf \u003d RandomForestClassifier(featuresCol\u003d\u0027features_sc\u0027,labelCol\u003d\u0027churn_enc\u0027,predictionCol\u003d\u0027prediction\u0027,  probabilityCol\u003d\"probability\",\nrawPredictionCol\u003d\u0027rawPrediction\u0027,maxDepth\u003d5, maxBins\u003d32, minInstancesPerNode\u003d1, minInfoGain\u003d0.0, maxMemoryInMB\u003d256, cacheNodeIds\u003dFalse,\ncheckpointInterval\u003d10, impurity\u003d\"gini\", numTrees\u003d20, featureSubsetStrategy\u003d\"auto\", seed\u003dNone, subsamplingRate\u003d1.0)\n\n# create pipeline\npipeline \u003d Pipeline(stages\u003d[indexer,assembler,scaler,rf])\nmodel \u003d pipeline.fit(train)\nmodel.save(\u0027file:///home/csvankhede/workspace/Customer_churn_prediction/pickled_obj/pipeline_v01\u0027)\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-18 10:59:13.203",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1592396827291_-453058021",
      "id": "paragraph_1592396827291_-453058021",
      "dateCreated": "2020-06-17 17:57:07.291",
      "dateStarted": "2020-06-18 10:22:12.555",
      "dateFinished": "2020-06-18 10:22:19.959",
      "status": "FINISHED"
    },
    {
      "text": "%spark.pyspark\n%matplotlib inline\n\n# predict and plot auc for training data\nfig, axs \u003d plt.subplots(1, 2, figsize\u003d(12, 4))\npred_train \u003d model.transform(train)\n\nbcm \u003d BinaryClassificationMetrics(pred_train,scoreCol\u003d\u0027rawPrediction\u0027, labelCol\u003d\u0027churn_enc\u0027)\nbcm.plot_roc_curve(ax\u003daxs[0])\n\n# predict and plot auc for test data\npred_test \u003d model.transform(test)\nbcm \u003d BinaryClassificationMetrics(pred_test,scoreCol\u003d\u0027rawPrediction\u0027, labelCol\u003d\u0027churn_enc\u0027)\nbcm.plot_roc_curve(ax\u003daxs[1])      ",
      "user": "anonymous",
      "dateUpdated": "2020-06-18 10:42:00.685",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cmatplotlib.axes._subplots.AxesSubplot at 0x7fa4ff407950\u003e\n"
          },
          {
            "type": "IMG",
            "data": "\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1592397206080_-471485442",
      "id": "paragraph_1592397206080_-471485442",
      "dateCreated": "2020-06-17 18:03:26.081",
      "dateStarted": "2020-06-18 10:22:43.989",
      "dateFinished": "2020-06-18 10:22:49.303",
      "status": "FINISHED"
    },
    {
      "text": "%spark.pyspark\n# import libraries\nimport warnings \nwarnings.filterwarnings(\u0027ignore\u0027)\nfrom pyspark.ml import PipelineModel\nfrom pyspark.sql.types import *\n\n# sample data point\nsample \u003d {\u0027customerid\u0027: \u00276713-OKOMC\u0027, \u0027gender\u0027: \u0027Female\u0027, \u0027seniorcitizen\u0027: 0, \u0027partner\u0027: \u0027No\u0027, \u0027dependents\u0027: \u0027No\u0027, \u0027tenure\u0027: 10, \u0027phoneservice\u0027: \u0027No\u0027, \u0027multiplelines\u0027: \u0027No phone service\u0027, \u0027internetservice\u0027: \u0027DSL\u0027, \u0027onlinesecurity\u0027: \u0027Yes\u0027, \u0027onlinebackup\u0027: \u0027No\u0027, \u0027deviceprotection\u0027: \u0027No\u0027, \u0027techsupport\u0027: \u0027No\u0027, \u0027streamingtv\u0027: \u0027No\u0027, \u0027streamingmovies\u0027: \u0027No\u0027, \u0027contract\u0027: \u0027Month-to-month\u0027, \u0027paperlessbilling\u0027: \u0027No\u0027, \u0027paymentmethod\u0027: \u0027Mailed check\u0027, \u0027monthlycharges\u0027: 29.75, \u0027totalcharges\u0027: 301.9}\n\n# load pipeline\nmodel \u003d PipelineModel.load(\u0027file:///home/csvankhede/workspace/Customer_churn_prediction/pickled_obj/pipeline_v01\u0027)\n\n# load schema\nschema_rdd \u003d sc.pickleFile(\u0027file:///home/csvankhede/workspace/Customer_churn_prediction/pickled_obj/schema.pickle\u0027)\nschema \u003d StructType(schema_rdd.collect())\n\n# convert data point to data frame\nsample \u003d spark.createDataFrame(spark.sparkContext.parallelize([sample]),schema\u003dschema)\n\npred \u003d model.transform(sample)\n\npred.select(\u0027prediction\u0027,\u0027probability\u0027).show(truncate\u003dFalse)",
      "user": "anonymous",
      "dateUpdated": "2020-06-18 11:32:27.735",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "/home/csvankhede/spark/python/lib/pyspark.zip/pyspark/util.py:141: UserWarning: PYSPARK_PIN_THREAD feature is enabled. However, note that it cannot inherit the local properties from the parent thread although it isolates each thread on PVM and JVM with its own local properties. \nTo work around this, you should manually copy and set the local properties from the parent thread to the child thread when you create another thread.\n+----------+--------------------------------------+\n|prediction|probability                           |\n+----------+--------------------------------------+\n|0.0       |[0.739195464140065,0.2608045358599349]|\n+----------+--------------------------------------+\n\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1592398068049_459836471",
      "id": "paragraph_1592398068049_459836471",
      "dateCreated": "2020-06-17 18:17:48.049",
      "dateStarted": "2020-06-18 11:32:28.300",
      "dateFinished": "2020-06-18 11:33:04.810",
      "status": "FINISHED"
    },
    {
      "text": "%spark.pyspark\nfor row in pred.select(\u0027probability\u0027).collect():\n    print(list(row.asDict()[\u0027probability\u0027])[1])",
      "user": "anonymous",
      "dateUpdated": "2020-06-18 11:05:35.495",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "0.2608045358599349\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1592398932068_-1386310968",
      "id": "paragraph_1592398932068_-1386310968",
      "dateCreated": "2020-06-17 18:32:12.068",
      "dateStarted": "2020-06-18 11:05:35.498",
      "dateFinished": "2020-06-18 11:05:35.917",
      "status": "FINISHED"
    },
    {
      "text": "%spark.pyspark\npred.select(\u0027probability\u0027).collect()[0].asDict()[\u0027probability\u0027][1]",
      "user": "anonymous",
      "dateUpdated": "2020-06-18 11:06:32.793",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "0.2608045358599349"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1592458098994_1606256110",
      "id": "paragraph_1592458098994_1606256110",
      "dateCreated": "2020-06-18 10:58:18.998",
      "dateStarted": "2020-06-18 11:06:32.800",
      "dateFinished": "2020-06-18 11:06:33.179",
      "status": "FINISHED"
    },
    {
      "text": "%spark.pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-18 11:05:51.242",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1592458551242_-1479813324",
      "id": "paragraph_1592458551242_-1479813324",
      "dateCreated": "2020-06-18 11:05:51.242",
      "status": "READY"
    }
  ],
  "name": "pipline",
  "id": "2FAQRNWQ3",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}